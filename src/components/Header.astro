---
// Import the necessary modules to get pages
import { getCollection } from 'astro:content';
import fs from 'node:fs';
import path from 'node:path';

// Define types for page files
type PageFileType = 'file' | 'directory';

interface PageFile {
    name: string;
    type: PageFileType;
}

interface NavLink {
    name: string;
    href: string;
}

// Function to recursively get all pages including folder-based pages
function getPageFiles(): PageFile[] {
    try {
        const pagesDir = path.join(process.cwd(), 'src/pages');
        if (!fs.existsSync(pagesDir)) {
            return [];
        }
        
        // Get all files and directories in the pages directory
        const entries = fs.readdirSync(pagesDir, { withFileTypes: true });
        
        // Process each entry
        const pages: PageFile[] = [];
        
        entries.forEach(entry => {
            const entryPath = path.join(pagesDir, entry.name);
            
            if (entry.isDirectory()) {
                // Check if the directory has an index.astro file
                const indexPath = path.join(entryPath, 'index.astro');
                if (fs.existsSync(indexPath)) {
                    // Add this as a page with the directory name
                    pages.push({
                        name: entry.name,
                        type: 'directory'
                    });
                }
            } else if (entry.isFile() && (entry.name.endsWith('.astro') || entry.name.endsWith('.md'))) {
                // Add regular page files
                pages.push({
                    name: entry.name,
                    type: 'file'
                });
            }
        });
        
        return pages;
    } catch (error) {
        console.error('Error reading pages directory:', error);
        return [];
    }
}

// Get all page files
const pageFiles = getPageFiles();

// For images in the public directory, we need to use a different approach
const logoSrc = '/content/fcsc.png';

// Create navigation links
const navLinks: NavLink[] = pageFiles.map(file => {
    let name: string = '';
    let href: string = '';
    let displayName: string = '';
    
    if (file.type === 'file') {
        // Remove the .astro extension
        name = file.name.replace('.astro', '');
        // Remove .md extension
        name = name.replace('.md', '');
        // Convert index to Home
        displayName = name === 'index' ? 'Home' : name.charAt(0).toUpperCase() + name.slice(1);
        // Create the href
        href = name === 'index' ? '/' : `/${name}`;
    } else if (file.type === 'directory') {
        // For directories with index.astro, use the directory name
        name = file.name;
        displayName = name.charAt(0).toUpperCase() + name.slice(1);
        href = `/${name}`;
    }
    
    return {
        name: displayName,
        href: href
    };
}).filter((link): link is NavLink => Boolean(link.name) && Boolean(link.href)); // Filter out any undefined links

// If no pages were found, add a default Home link
if (navLinks.length === 0) {
    navLinks.push({ name: 'Home', href: '/' });
}

// Sort navigation links with Home first, then predefined order, then alphabetical
navLinks.sort((a, b) => {
    const order = ['Home', 'Blog', 'Events', 'Resources', 'Notices', 'Merchandise', 'About'];
    
    // Special case: Home is always first
    if (a.name === 'Home') return -1;
    if (b.name === 'Home') return 1;
    
    const indexA = order.indexOf(a.name);
    const indexB = order.indexOf(b.name);
    
    // If both items are in our predefined order, sort by that order
    if (indexA !== -1 && indexB !== -1) {
        return indexA - indexB;
    }
    
    // If only one item is in our predefined order, it comes first
    if (indexA !== -1) return -1;
    if (indexB !== -1) return 1;
    
    // If neither item is in our predefined order, sort alphabetically
    return a.name.localeCompare(b.name);
});

---

<header class="bg-[#13151F] py-4 shadow-md relative z-50">
    <nav class="container mx-auto px-4 flex justify-between items-center">
        <!-- logo div -->
        <div class="w-[120px] h-[30px]">
            <img class="w-full h-full object-contain" src="/content/fcsc.png" alt="Logo" />
        </div>
        
        <!-- Mobile menu toggle button -->        
        <button id="menu-toggle" class="lg:hidden z-[300] p-1 transition-transform duration-300 hover:scale-110" aria-label="Toggle menu">
            <span class="block w-6 h-[3px] my-[5px] rounded-sm bg-white transition-all duration-300"></span>
            <span class="block w-6 h-[3px] my-[5px] rounded-sm bg-white transition-all duration-300"></span>
            <span class="block w-6 h-[3px] my-[5px] rounded-sm bg-white transition-all duration-300"></span>
        </button>
        
        <!-- Navigation links -->
        <ul class="hidden lg:flex items-center space-x-6">
            {navLinks.map((link) => (
                <li>
                    <a href={link.href} class="text-white font-medium relative py-1 hover:text-[#00A3FF] transition-colors duration-300 after:absolute after:bottom-0 after:left-0 after:w-0 after:h-0.5 after:bg-gradient-to-r after:from-[#00A3FF] after:to-[#6E46FF] after:transition-all after:duration-300 hover:after:w-full">
                        {link.name}
                    </a>
                </li>
            ))}
        </ul>
        
        <!-- Mobile menu (hidden by default) -->
        <div class="mobile-menu fixed top-0 right-[-100%] w-4/5 max-w-[300px] h-screen bg-[#050508] z-[200] flex flex-col items-center justify-center p-8 transition-all duration-300 shadow-xl border-l-4 border-[#00A3FF]">
            <!-- Close button -->
            <button id="close-menu" class="absolute top-4 right-4 text-white hover:text-[#00A3FF] transition-colors duration-300">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
            </button>
            
            <!-- Logo at top -->
            <div class="mb-8">
                <img src="/content/fcsc.png" alt="FCSC Logo" class="w-[120px] h-auto" />
            </div>
            
            <ul class="w-full">
                {navLinks.map((link) => (
                    <li class="mb-5">
                        <a href={link.href} class="text-white text-xl font-medium inline-block w-full py-3 px-4 hover:bg-[#00A3FF]/20 hover:text-[#00A3FF] rounded-lg transition-all duration-300 text-center">
                            {link.name}
                        </a>
                    </li>
                ))}
            </ul>
            
            <!-- Social links at bottom -->
            <div class="mt-8 flex gap-4">
                <a href="#" class="w-10 h-10 rounded-full bg-[#00A3FF]/20 flex items-center justify-center text-white hover:bg-[#00A3FF] transition-colors duration-300">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path></svg>
                </a>
                <a href="#" class="w-10 h-10 rounded-full bg-[#00A3FF]/20 flex items-center justify-center text-white hover:bg-[#00A3FF] transition-colors duration-300">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line></svg>
                </a>
                <a href="#" class="w-10 h-10 rounded-full bg-[#00A3FF]/20 flex items-center justify-center text-white hover:bg-[#00A3FF] transition-colors duration-300">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect x="2" y="9" width="4" height="12"></rect><circle cx="4" cy="4" r="2"></circle></svg>
                </a>
            </div>
        </div>
    </nav>
</header>

<script>
    // Mobile menu toggle functionality
    document.addEventListener('DOMContentLoaded', () => {
        const mobileMenuToggle = document.getElementById('menu-toggle');
        const mobileMenu = document.querySelector('.mobile-menu');
        const closeMenuButton = document.getElementById('close-menu');
        
        // Function to open the menu
        function openMenu() {
            if (mobileMenu) {
                mobileMenu.classList.remove('right-[-100%]');
                mobileMenu.classList.add('right-0');
                
                // Hide the menu toggle button when menu is open
                if (mobileMenuToggle) {
                    mobileMenuToggle.classList.add('hidden');
                }
            }
        }
        
        // Function to close the menu
        function closeMenu() {
            if (mobileMenu) {
                mobileMenu.classList.add('right-[-100%]');
                mobileMenu.classList.remove('right-0');
                
                // Show the menu toggle button when menu is closed
                if (mobileMenuToggle) {
                    mobileMenuToggle.classList.remove('hidden');
                }
            }
        }
        
        // Add event listener to the hamburger menu button
        if (mobileMenuToggle) {
            mobileMenuToggle.addEventListener('click', () => {
                openMenu();
            });
        }
        
        // Add event listener to the close button
        if (closeMenuButton) {
            closeMenuButton.addEventListener('click', () => {
                closeMenu();
            });
        }
        
        // Close menu when clicking outside
        document.addEventListener('click', (event) => {
            const target = event.target as Node;
            
            if (mobileMenu && mobileMenuToggle) {
                // Only if menu is open and click is outside menu and toggle button
                if (!mobileMenu.contains(target) && 
                    !mobileMenuToggle.contains(target) && 
                    mobileMenu.classList.contains('right-0')) {
                    
                    closeMenu();
                }
            }
        });
        
        // Debug code to check if elements are found
        console.log('Menu toggle found:', !!mobileMenuToggle);
        console.log('Mobile menu found:', !!mobileMenu);
        console.log('Close button found:', !!closeMenuButton);
    });
</script>

<!-- Styles are now handled by Tailwind CSS -->
